#!/usr/bin/python3
#
#
# Este script hace:
# --
# -- RELLENAR AQUI 
#

import sys
import os
import configparser
import argparse
import logging


# Algunas variables que se utilizan en 
# en Garen
garen_log="/var/log/garen.log"
garen_conf="/etc/garen-ohmwrecker/garen.conf"
garen_custom_conf="/etc/garen-ohmwrecker/garen-custom.conf"
garen_conf_d="/etc/garen-ohmwrecker/conf.d/"
rutaJSON=""
rutaNotesJSON=""

# Logging values
logging.basicConfig(filename=garen_log,format='%(asctime)s %(message)s')

# Some values for default variables
default_sensor_model=""
sensor_ip=""
# Some arguments - values
args=""


def die(msg):
	print(" * [ ERROR ] : "+msg)
	sys.exit(1)

def load_configuration():
	#
	# Este metodo lo que hace es leer el fichero de configuracion y obtener
	# los parametros para la conexion a la base de datos y otros datos 
	# utiles para garen.
	
	# Lo primero, hacemos log de que la configuracion va a ser
	# cargada en memoria.	
	logging.warning('Loading custom configuration')

	# Obtenemos un objeto de tipo configparser
	# que nos permite acceder a los diferentes 
	# parametros de configuracion que se encuentran 
	# en el fichero, separados por secciones.
	config = configparser.ConfigParser()

	# Supporting custom configuration
	# from users.
	config.read(garen_custom_conf)

	
	# Una vez tenemos la configuracion en "config", lo que hacemos 
	# es rellenar las variables que utilitaremos con los diferentes valores.
	# En realidad esto no haria falta, podriamos realizar todas las 
	# consultas a la "configuracion" de nuestro programa utilizando
	# la estrcutura "config" que hemos generado en las lineas anteriores
	# pero esto favorece la legibilidad del codigo.
	

	global interval
	interval =int(config["daemon"]["interval"])

	global sensor_ip
	sensor_ip = config["general"]["sensor_ip"]

	logging.warning(" Load configuration done: "+str(sensor_ip)+" each "+str(interval)+" seconds")
	


def get_parameters():
	# Obtenemos los parametros que se nos han indicado en la llamada, de tal manera
	# que podamos cambiar el comportamiento de nuestro programa desde la linea de ordenes
	# Se esta utilizando una libreria en Python que se encarga de realizar las comprobaciones
	# pertinentes de cada uno de los argumentos que se pasan, facilitando el uso de los parametros
	# de manera no-posicional. (da igual invocar al script con los parametros :

	parser = argparse.ArgumentParser(description='Get/Set values from Garen')
	parser.add_argument("-s","--setip",help="set value of the IP")
	parser.add_argument("-g","--getip",help="get value of the IP", action="store_true")


	# Obtenemos los diferentes argumentos	
	args = parser.parse_args()
	return args
	
#
# MAIN
#

if __name__ == "__main__":

	# Este es metodo que se invoca cuando lanzamos a garen desde
	# la linea de comandos, asi que vamos a  ir haciendo log 
	# de cada uno de los pasos.

	logging.warning(' * Starting Garen Conf')
	
	# Obtenemos los argumentos con los que hemos sido invocados
	logging.warning(' * Getting parameters ')
	args=get_parameters()
	
	# Load configuration 
	logging.warning(' * Load configuration ')
	load_configuration()

	if (args.getip):
		print("Garen Conf : Sensor ip is "+sensor_ip)
	
	
	core()




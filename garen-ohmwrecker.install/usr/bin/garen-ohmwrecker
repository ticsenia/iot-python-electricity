#!/usr/bin/python3
#
#
# Este script hace:
# --
# -- RELLENAR AQUI 
#

import json
import requests
import sys
import urllib.request
import os
import MySQLdb
import configparser
import threading
import daemonize
import argparse


# Algunas variables que se utilizan en 
# en Garen
garen_conf="/etc/garen-ohmwrecker/garen.conf"
garen_conf_d="/etc/garen-ohmwrecker/conf.d/"
rutaJSON=""
rutaNotesJSON=""

# Some values for default variables
default_sensor_model=""

# Some values for Database
db_server=""
db_user=""
db_pass=""
db_table_default=""

# Some arguments - values
args=""


def die(msg):
	print(" * [ ERROR ] : "+msg)
	print(" * [ USAGE ] :  python-garen.py IP [MODELO] -c")
	print(" * [ USAGE ] :  python-garen.py IP [MODELO] -c [--no-daemonize]")
	sys.exit(1)

def load_configuration():
	'''
	Load configuration from config files
	'''
	config = configparser.ConfigParser()
	config.read(garen_conf)
	db_user = config["mysqld"]["user"]
	db_server = config["mysqld"]["server"]
	db_pass = config["mysqld"]["pass"]
	db_table_default = config["mysqld"]["table_default"]
	default_sensor_model=config["general"]["sensor_model"]
	
	
def store_in_db(smeasure):
	# Open database connection
	db = MySQLdb.connect(db_server,db_user,db_pass,db_table_default)

	# prepare a cursor object using cursor() method
	cursor = db.cursor()

	# Prepare SQL query to INSERT a record into the database.
	sql = ("""INSERT INTO umg511_tbl (umg511_text) VALUES (%s)""", smeasure)

	try:
		# Execute the SQL command
		cursor.execute(*sql)
		# Commit your changes in the database
		db.commit()
	except:
		# Rollback in case there is any error
		db.rollback()

	# disconnect from server
	db.close()



def lastreplace(s,old,new,ocurrence):
	li = s.rsplit(old, ocurrence)
	return new.join(li)


def get_list_of_variables(model):
	# Vamos a generar una variable que contendra el listado de las variables de la Janitza-511
	# de tal manera el codigo quede lo mas limpio posible
	if(model == "Janitza511"):
		conffile=open(garen_conf_d+model+".conf")
		confstring=conffile.read().replace("\n",",")
		confstring=lastreplace(confstring,","," ",1)
		return confstring


def get_json(url,model):
	print(" * [ JSON ] : Getting values from URL ")

	var_model=get_list_of_variables(model)
	url="http://"+url+"/json.do?"+var_model

	r = urllib.request.urlopen(url)
	return json.loads(r.read().decode())
	

def store_measures(jmeasures,model):
	
	# Testing with name definitions
	fnotes = open(garen_conf_d+model+".definition")
	jnotes = json.load(fnotes)

	#cmeasures=open("temporal_csvfile.csv","w")
	#cmeasures.write("Variable,Medida,Unidad,Descripcion")
	#cmeasures.write("\n")
	
	smeasures=""
	for key, value in jmeasures.items():
		#print("* Key -> " + str(key) + "\n\t* Values -> "+str(value))
		linea = str(key)+","+str(value[0])+","+str(value[1])+","
		try:
			#print("\t* Notes -> "+jnotes[key])
			linea= linea +str(jnotes[key]).replace(",","-").replace(";","-")
		except Exception as e:
			#print("\t* Notes -> Vacio")
			linea= linea +"None"
		#cmeasures.write(linea)
		#cmeasures.write("\n")
		smeasures=smeasures+linea+"\n"

	# Aqui FILL IN THE GAPS
	store_in_db(smeasures)
	


def get_parameters():
	parser = argparse.ArgumentParser(description='Store values from Janitza into DB')
	parser.add_argument('-ipsensor', nargs='+',help='an IP for getting values')
	parser.add_argument("-m","--model",help="the model of sensor")
	parser.add_argument("-c","--csv",help="type of content to get [CSV format data]", action="store_true")
	parser.add_argument("--no-daemonize", help="Launch program without being daemonized", action="store_true")
	
	args = parser.parse_args()
	return args
	
#
# MAIN
#

if __name__ == "__main__":

	# Do some sanity checks
	# arguments, files, and so on.
	args=get_parameters()
	
	# Load configuration 
	load_configuration()

	
	if (args.model == ""):
		args.model = default_sensor_model

	print(str(args))
	sys.exit(0)	
	variable_list = get_list_of_variables(model)
	
	# Debug only
	jmeasures = get_json(args.ipsensor,model)
	#auxf = open("last.json")
	#jmeasures = json.load(auxf)

	store_measures(jmeasures,model)





